# Copyright (c) 2019 - Endless
#
# This file is part of Azafea
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.


import os

import pytest

from .. import IntegrationTest


class TestEmptyMigrations(IntegrationTest):
    # This needs to run before the "setup_teardown" method, and it seems pytest runs fixtures in
    # alphabetical order when they have the same scope, which is what makes this work.
    # FIXME: Can we control the order explicitly to be safer?
    @pytest.fixture(autouse=True)
    def set_handler_module(self, handler_with_migrations):
        self.handler_module = handler_with_migrations.basename
        self._handler_path = handler_with_migrations

    def test_make_empty_migration(self):
        self.run_subcommand('make-migration', 'test_make_empty_migration')

        migrations = (self._handler_path / 'migrations').listdir()
        assert len(migrations) == 1

        migration = migrations[0].read_text('utf-8')
        assert 'down_revision = None'
        assert 'depends_on = None' in migration
        assert "branch_labels = ('test_make_empty_migration',)" in migration
        assert '\n'.join([
            'def upgrade():',
            '    # ### commands auto generated by Alembic - please adjust! ###',
            '    pass',
            '    # ### end Alembic commands ###',
        ]) in migration
        assert '\n'.join([
            'def downgrade():',
            '    # ### commands auto generated by Alembic - please adjust! ###',
            '    pass',
        ]) in migration


class TestMigrations(IntegrationTest):
    handler_module = 'azafea.tests.integration.migrations.handler_module'

    @pytest.fixture(autouse=True)
    def clean_migrations(self, request):
        self._migrations_dir = os.path.join(request.fspath.dirname, 'migrations')
        os.makedirs(self._migrations_dir, exist_ok=True)
        assert len(self._list_migrations()) == 0

        yield

        for migration in self._list_migrations():
            os.unlink(migration)

    def _list_migrations(self):
        return [os.path.join(self._migrations_dir, m) for m in os.scandir(self._migrations_dir)]

    def test_make_migration(self, request):
        self.run_subcommand('make-migration', 'test_make_migration')

        generated_migrations = self._list_migrations()
        assert len(generated_migrations) == 1

        with open(generated_migrations[0], 'r') as f:
            migration = f.read()

        assert 'down_revision = None'
        assert 'depends_on = None' in migration
        assert "branch_labels = ('test_make_migration',)" in migration
        assert '\n'.join([
            'def upgrade():',
            '    # ### commands auto generated by Alembic - please adjust! ###',
            "    op.create_table('migration_event',"
        ]) in migration
        assert '\n'.join([
            'def downgrade():',
            '    # ### commands auto generated by Alembic - please adjust! ###',
            "    op.drop_table('migration_event')",
            '    # ### end Alembic commands ###',
        ]) in migration
